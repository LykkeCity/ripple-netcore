<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>    
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageId>Ripple.NetCore</PackageId>
    <Authors>Chris Williams, Ripple Inc.</Authors>    
    <Company>CloudScope, LLC</Company>
    <Product>Ripple.NetCore</Product>
    <PackageLicenseUrl>https://github.com/chriswill/ripple-netcore/blob/master/LICENSE</PackageLicenseUrl>
    <RepositoryUrl>https://github.com/chriswill/ripple-netcore</RepositoryUrl>
    <Description>Ripple.NetCore is a set of .Net libraries for working with the Ripple network.  The only supported functionality at this time is offline signing of transactions.</Description>
    <PackageProjectUrl>https://github.com/chriswill/ripple-netcore</PackageProjectUrl>
    <PackageTags>Cryptocurrencies;XRP;Ripple</PackageTags>
    <Copyright>2017</Copyright>
    <PackageReleaseNotes>Updated to include support for escrow and payment channel transactions</PackageReleaseNotes>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <FileVersion>1.1.0.0</FileVersion>
    <Version>1.1.0</Version>    
  </PropertyGroup>

  <ItemGroup Label="Direct Nuget dependencies">
    <PackageReference Include="Newtonsoft.Json" Version="9.0.1" />
  </ItemGroup>

  <ItemGroup Label="Direct project dependencies">
    <ProjectReference Include="..\Ripple.Core\Ripple.Core.csproj" PrivateAssets="All" />
    <ProjectReference Include="..\Ripple.Signing\Ripple.Signing.csproj" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup Label="Transient Nuget dependencies">
    <PackageReference Include="Portable.BouncyCastle" Version="1.8.1.3" />
  </ItemGroup>

  <ItemGroup Label="Transient project dependencies">
    <ProjectReference Include="..\Chaos.NaCl\Chaos.NaCl.csproj" PrivateAssets="All" />
    <ProjectReference Include="..\Ripple.Address\Ripple.Address.csproj" PrivateAssets="All" />
  </ItemGroup>
  
  <!--
    The following solves the problem that 'dotnet pack' does not include the DLLs from referenced projects.
    See https://github.com/NuGet/Home/issues/3891 for a description of the problem
    and for newer versions / workarounds / built-in methods.
  -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>
      $(TargetsForTfmSpecificBuildOutput);PackReferencedProjectOutputs
    </TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <Target Name="PackReferencedProjectOutputs" DependsOnTargets="BuildOnlySettings;ResolveReferences">
    <ItemGroup>
      <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths-&gt;WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))" />
    </ItemGroup>
  </Target>

</Project>
